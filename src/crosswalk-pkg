#!/usr/bin/env node

// Copyright Â© 2014 Intel Corporation. All rights reserved.
// Use  of this  source  code is  governed by  an Apache v2
// license that can be found in the LICENSE-APACHE-V2 file.

var FS = require("fs");
var Path = require("path");
var OS = require("os");

var FormatJson = require("format-json");
var Minimist = require("minimist");
var MkTemp = require("mktemp");
var ShellJS = require("shelljs");

var Application = require("./Application");
var CommandParser = require("./CommandParser");
var Manifest = require("./Manifest");
var Targets = require("../src/util/Targets");

var cat = require("./Main");
var output = require("./TerminalOutput").getInstance();
var util = require("./util/index.js");



// Parse args
var argv = Minimist(process.argv.slice(2));

// Help
if (process.argv.length < 3 ||
    process.argv[2] === "help" ||
    argv.h ||
    argv.help) {
    help();
    process.exit(cat.EXIT_CODE_OK);
}

// Version
if (argv.v ||
    argv.version) {
    var Package = require("../package.json");
    output.write(Package.version + "\n");
    process.exit(cat.EXIT_CODE_OK);
}

// Check html app path.
// Path needs to be the last argument.
var appPath = Path.resolve(Path.normalize(process.argv[process.argv.length - 1]));
if (ShellJS.test("-d", appPath)) {
    _highlight(output, "Packaging", appPath);
} else {
    output.error("Directory does not exist: " + appPath);
    output.error("Path to html app directory needs to be passed as final argument");
    process.exit(cat.EXIT_CODE_ERROR);
}

// Determine packageId
var packageId = null;
var json = null;
var manifestPath = Path.join(appPath, "manifest.json");
if (argv.m || argv.manifest) {
    // packageId or manifest snippet from command-line?
    var manifestInput = argv.m ? argv.m : argv.manifest;
    if (manifestInput[0] === "{") {
        if (ShellJS.test("-f", manifestPath)) {
            output.error("Failed to process manifest json data");
            output.error("Passing manifest data is only supported when manifest.json does not already exist");
        } else {
            try {
                json = JSON.parse(manifestInput);
                FS.writeFileSync(manifestPath, FormatJson.plain(json));
                // Passing manifest data is just a shortcut for QA, so we
                // frob the args to make it seem like it never happened, so
                // later code expecting a package-id is not confused.
                delete argv.m;
                delete argv.manifest;
            } catch (e) {
                output.error(e);
                output.error("Failed to parse manifest json data");
            }
        }
    } else {
        packageId = CommandParser.validatePackageId(manifestInput, output);
    }
}

if (!packageId) {
    // packageId from existing web manifest?
    json = _readManifest(manifestPath, output);
    if (!json.xwalk_package_id) {
        output.error("Missing field 'xwalk_package_id' in the form of 'com.example.foo' in manifest.json");
        process.exit(cat.EXIT_CODE_ERROR);
    }
    packageId = CommandParser.validatePackageId(json.xwalk_package_id, output);
}
if (!packageId) {
    process.exit(cat.EXIT_CODE_ERROR);
}

// Ensure highlight message fits standard terminal width.
// (Windows breaks at > 78, and we indent by 2, so 76)
function _highlight(output, message, path) {
    var info = message + " " + path;
    if (info.length > 76) {
        var remain = 76 - (message + " ...").length;
        var pathAbbrv = path.substring(path.length - remain);
        info = message + " ..." + pathAbbrv;
    }
    output.highlight(info);
}

// Display help output
function help() {

    var help = "" +
        "  Crosswalk Project Packaging Tool -- https://crosswalk-project.org\n" +
        "  Usage: crosswalk-pkg <options> <path>\n" +
        "\n" +
        "  <options>\n" +
        "    -a <android-conf>\n" +
        "    --android=<android-conf>      Extra configurations for Android\n" +
        "    -c <version-spec>\n" +
        "    --crosswalk=<version-spec>    Specify Crosswalk version or path\n" +
        "    -h, --help                    Print usage information\n" +
        "    -k, --keep                    Keep build tree for debugging\n" +
        "    -m <package-id>\n" +
        "    --manifest=<package-id>       Fill manifest.json with default values\n" +
        "    -p <target-systems>\n" +
        "    --platforms=<target-systems>  Specify target platform\n" +
        "    -r, --release                 Build release packages\n" +
        "    -s, --skip-check              Skip host setup check before building\n" +
        "    -t <target-archs>\n" +
        "    --targets=<target-archs>      Target CPU architectures\n" +
        "    -v, --version                 Print tool version\n" +
        "    -w <windows-conf>\n" +
        "    --windows=<windows-conf>      Extra configurations for Windows\n" +
        "\n" +
        "  Note that single character options should not be followed by '=',\n" +
        "  i.e. -c=canary doesn't work.\n" +
        "\n" +
        "  <path>\n" +
        "    Path to directory that contains a web app\n" +
        "\n" +
        "  <android-conf>\n" +
        "    Quoted string with extra config, e.g. \"shared\"\n" +
        "    * \"shared\" Build APK that depends on crosswalk in the Google Play Store\n" +
        "    * \"lite\"   Use crosswalk-lite, see Crosswalk Wiki\n" +
        "\n" +
        "  <package-id>\n" +
        "    Canonical application name, e.g. com.example.foo, needs to\n" +
        "    * Comprise of 3 or more period-separated parts\n" +
        "    * Begin with lowecase letters\n" +
        "\n" +
        "  <target-archs>\n" +
        "    List of CPU architectures for which to create packages.\n" +
        "    Currently supported ABIs are: armeabi-v7a, arm64-v8a, x86, x86_64\n" +
        "    * Prefixes will be matched, so \"a\",\"ar\", or \"arm\" yield both ARM APKs\n" +
        "    * Same for \"x\" and \"x8\", but \"x86\" is an exact match, only x86-32 conforms\n" +
        "    * Short-hands \"32\" and \"64\" build ARM and x86 for the requested word size\n" +
        "    * Default behavior is equivalent to \"32\", creation of 32-bit installers\n" +
        "    Example: --targets=\"arm x86\" builds both 32-bit and 64-bit ARM packages\n" +
        "             plus the 32-bit x86 package.\n" +
        "\n" +
        "  <target-systems>\n" +
        "    List of operating systems for which to create packages.\n" +
        "    Default is android-only, which is supported on Apple OSX, Linux and Windows\n" +
        "    Creating Windows MSIs is supported on Microsoft Windows only.\n" +
        "    Example: --platforms=\"android windows\"\n" +
        "\n" +
        "  <version-spec>\n" +
        "    * Channel name, i.e. stable/beta/canary\n" +
        "    * Version number, e.g. 14.43.343.25\n" +
        "    * Path to release, e.g. $HOME/Downloads/crosswalk-14.43.343.25.zip\n" +
        "    * Path to build, e.g. crosswalk/src/out/Release/xwalk_app_template\n" +
        "    When passing a local file or directory, only the contained ABIs can be built.\n" +
        "    See <target-archs> for details.\n" +
        "\n" +
        "  <windows-conf>\n" +
        "    Quoted string with extra config, e.g. \"google-api-key:<name>\"\n" +
        "    where <name> is the keyset in ~/.crosswalk-app-tools-keys.json\n" +
        "\n" +
        "  Environment variables\n" +
        "    CROSSWALK_APP_TOOLS_CACHE_DIR=<path>: Keep downloaded files in this dir\n" +
        "\n";

    output.write(help);
}

// Check platform
function check(app, appPath, extraArgs, output, callback) {

    // Per default check only on non-interactive termial (logfile ...)
    if (!extraArgs.hasOwnProperty("skipCheck")) {
        extraArgs.skipCheck = !process.stdout.isTTY;
    }

    if (extraArgs.skipCheck) {
        output.highlight("Skipping host setup check");
        callback(cat.EXIT_CODE_OK);
    } else {
        output.highlight("Checking host setup");
        app.check(extraArgs.platforms, output, callback);
    }
}

// Initialize app tools
function manifest(app, appPath, extraArgs, output, callback) {

    if (extraArgs.manifest) {
        _highlight(output, "Initializing manifest.json in", appPath);
        extraArgs["package-id"] = extraArgs.manifest;
        app.initManifest(appPath, extraArgs, output, callback);
        return;
    }

    callback(cat.EXIT_CODE_OK);
}

// Initialize app tools
function init(app, packageId, callback) {

    // Create temp path
    ShellJS.pushd(OS.tmpdir());
    var tmpDirName = MkTemp.createDirSync("XXXXXX");
    ShellJS.popd();
    var buildPath = Path.join(OS.tmpdir(), tmpDirName);
    _highlight(output, "Initializing build dir", buildPath);

    var errno = cat.EXIT_CODE_OK;
    try {
        Application.call(app, buildPath, packageId);
    } catch (e) {
        output.error(e.message);
        errno = cat.EXIT_CODE_ERROR;
    }
    callback(errno);
}

// Create skeleton for 32bit ABIs.
// This is separate from the 64bit because they are in separate downloads.
function create(app, packageId, extraArgs, platform, callback) {

    // FIXME android-specific code here is not ideal
    if (platform === "android") {

        // Skip if no 32bit ABIs requested.
        if (extraArgs.targets["32"].length === 0) {
            callback(cat.EXIT_CODE_OK);
            return;
        }

        var androidArgs = [];
        if (extraArgs.android) {
            androidArgs = extraArgs.android.split(" ");
        }

        // TODO implement way to pass through parameters w/o platform prefix
        if (androidArgs.indexOf("lite") > -1) {
            extraArgs["android-lite"] = true;
        }
        if (androidArgs.indexOf("shared") > -1) {
            extraArgs["android-shared"] = true;
        }

        delete extraArgs["android-targets"];
        if (extraArgs.targets["32"].length > 0) {
            extraArgs["android-targets"] = extraArgs.targets["32"];
        }
    }

    extraArgs.platform = platform;
    app.create(packageId, extraArgs, callback);
}

// Create skeleton for 64bit ABIs.
// This is separate from the 32bit because they are in separate downloads.
function create64(app, packageId, extraArgs, callback) {

    // Skip if no 64bit ABIs requested.
    if (extraArgs.targets["64"].length == 0) {
        callback(cat.EXIT_CODE_OK);
        return;
    }

    delete extraArgs["android-lite"];
    delete extraArgs["android-shared"];

    delete extraArgs["android-targets"];
    if (extraArgs.targets["64"].length > 0) {
        extraArgs["android-targets"] = extraArgs.targets["64"];
    }

    app.create(packageId, extraArgs, callback);
}

// Copy
function copy(app, appPath, extraArgs, callback) {

    // Replace skeleton app with actual one
    app.output.highlight("Importing web application");
    app.output.info("Source", appPath);
    app.output.info("Destination", app.appPath);

    ShellJS.rm("-rf", Path.join(app.appPath, "*"));
    ShellJS.cp("-r", Path.join(appPath, "*"), app.appPath);

    // Initialise and load manifest
    var manifestPath = Path.join(app.appPath, "manifest.json");
    Manifest.addDefaults(output, manifestPath, app.packageId);
    var ret = Manifest.ensureAppProtocol(output, manifestPath, app.packageId);
    if (!ret) {
        callback(cat.EXIT_CODE_ERROR);
        return;
    }
    app.loadManifest(manifestPath);

    // Propagate target platform cause we just nuked the manifest
    if (extraArgs.platforms.length > 0) {
        app.manifest.targetPlatforms = extraArgs.platforms;
    }

    callback(cat.EXIT_CODE_OK);
}

var _hooksSharedState = {};

// preHook
function preHook(app, configId, extraArgs, platform, nextPlatform) {

    util.iterate(
        app.manifest.extensionHooks,
        function(path, nextHook) {

            // Callback function for the call into the extension hook.
            function callback(errno) {
                if (errno) {
                    throw new Error("Packaging failed");
                } else {
                    nextHook();
                }
            }

            // Execute extension "pre" hook if found
            if (ShellJS.test("-f", path)) {
                var Ctor = require(path);
                var hooks = new Ctor(app, configId, extraArgs, _hooksSharedState);
                hooks.prePackage(platform, callback);
            } else {
                nextHook();
            }
        },
        function () {
            nextPlatform();
        });
}

// Build
function build(app, configId, extraArgs, platform, callback) {

    var targets = extraArgs.targets["32"].concat(extraArgs.targets["64"]);
    delete extraArgs["android-targets"];
    if (targets.length > 0) {
        extraArgs["android-targets"] = targets;
    }

    extraArgs.platform = platform;
    app.output.highlight("Building packages " + targets.join(","));
    app.build(configId, extraArgs, callback);
}

// postHook
function postHook(app, configId, extraArgs, platform, nextPlatform) {

    util.iterate(
        app.manifest.extensionHooks,
        function(path, nextHook) {

            // Callback function for the call into the extension hook.
            function callback(errno) {
                if (errno) {
                    throw new Error("Packaging failed");
                } else {
                    nextHook();
                }
            }

            // Execute extension "post" hook if found
            if (ShellJS.test("-f", path)) {
                var Ctor = require(path);
                var hooks = new Ctor(app, configId, extraArgs, _hooksSharedState);
                hooks.postPackage(platform, callback);
            } else {
                nextHook();
            }
        },
        function () {
            nextPlatform();
        });
}

// Cleanup
function clean(app, extraArgs, callback) {

    if (extraArgs.keep) {
        app.output.info("Keeping build tree in", app.rootPath);
    } else {
        var basePath = Path.dirname(app.rootPath);
        app.output.info("Deleting build dir", basePath);
        ShellJS.rm("-rf", basePath);
    }

    callback(cat.EXIT_CODE_OK);
}

// Arguments
var extraArgs = {};

if (argv.a) {
    extraArgs.android = argv.a;
}
if (argv.android) {
    extraArgs.android = argv.android;
}
delete argv.a;
delete argv.android;

if (extraArgs.android) {

    var androidArgs = extraArgs.android.split(" ");
    if (androidArgs.indexOf("shared") > -1 &&
        (argv.t || argv.targets)) {

        output.warning("Ignoring -t / --targets for shared android build");
        delete argv.t;
        delete argv.targets;
    }

}

// Crosswalk, see help for <version-spec>
if (argv.c) {
    // TODO implement way to pass through parameters w/o platform prefix
    extraArgs["android-crosswalk"] = argv.c;
    extraArgs["windows-crosswalk"] = argv.c;
}
if (argv.crosswalk) {
    // TODO implement way to pass through parameters w/o platform prefix
    extraArgs["android-crosswalk"] = argv.crosswalk;
    extraArgs["windows-crosswalk"] = argv.crosswalk;
}
delete argv.c;
delete argv.crosswalk;

if (argv.k || argv.keep) {
    extraArgs.keep = true;
}
delete argv.k;
delete argv.keep;

if (argv.m) {
    extraArgs.manifest = argv.m;
}
if (argv.manifest) {
    extraArgs.manifest = argv.manifest;
}
delete argv.m;
delete argv.manifest;

if (argv.p || argv.platforms) {
    var platforms = argv.p ? argv.p : argv.platforms;
    extraArgs.platforms = platforms.split(" ").filter(function (value) {
        // Filter empty entries caused by extra whitespace.
        return value;
    });
} else if (ShellJS.test("-f", manifestPath)) {
    json = _readManifest(manifestPath, output);
    if (json.xwalk_target_platforms) {
        extraArgs.platforms = json.xwalk_target_platforms;
    }
}
delete argv.p;
delete argv.platforms;

if (!extraArgs.platforms) {
    extraArgs.platforms = [ "android" ];
}

var buildConfig = null;
if (argv.r || argv.release) {
    buildConfig = "release";
}
delete argv.r;
delete argv.release;

// extraArgs.skipCheck is tri-state:
// unset: default (check if running in interactive terminal)
// true: skip check
// false: force check
if (argv["s"] === "no" ||
    argv["skip-check"] === "no") {
    extraArgs.skipCheck = false;
} else if (argv["s"] || argv["skip-check"]) {
    extraArgs.skipCheck = true;
}
delete argv["s"];
delete argv["skip-check"];

// Targets
// By default, build both 32bit targets.
extraArgs.targets = { "32": [ "armeabi-v7a", "x86" ],
                      "64": []
                    };
if (argv.t || argv.targets) {

    var targets = { "32": [],
                    "64": []
                  };
    // Parse and match
    var targetsParam = "" + (argv.t ? argv.t : argv.targets);
    var targetsKeys = targetsParam.split(" ");
    targetsKeys.forEach(function (key) {
        if (key.length > 0) {
            var abis = Targets.match(key);
            abis.forEach(function (abi) {
                var size = Targets.ABI_WORDSIZE[abi];
                if (targets[size].indexOf(abi) < 0) {
                    targets[size].push(abi);
                }
            });
        }
    });

    // Use targets if they are valid
    if (targets["32"].length || targets["64"].length) {
        extraArgs.targets = targets;
    } else {
        output.warning("Ignoring unknown -t / --targets, building default");
    }
}
delete argv.t;
delete argv.targets;

var windowsArgs = argv.w ? argv.w : argv.windows;
if (windowsArgs) {
    var a = windowsArgs.split(":");
    if (a[0] === "google-api-key" && a.length > 1) {
        extraArgs["windows-googleApiKeyName"] = a[1];
    }
}
delete argv.w;
delete argv.windows;

// Check for unhandled leftover args,
// there should not be any at this point.
for (var arg in argv) {
    if (argv.hasOwnProperty(arg) &&
        arg != "_") {
        output.error("Ignoring unknown argument " + arg);
    }
}

// Build steps
var tasks = [
    { func: check,    args: [ cat, appPath, extraArgs, output ] },
    { func: manifest, args: [ cat, appPath, extraArgs, output ] },
    { func: init,     args: [ cat, packageId                  ] },
    { func: create,   args: [ cat, packageId, extraArgs       ], loop: extraArgs.platforms },
    { func: create64, args: [ cat, packageId, extraArgs       ] },
    { func: copy,     args: [ cat, appPath, extraArgs         ] },
    { func: preHook,  args: [ cat, buildConfig, extraArgs     ], loop: extraArgs.platforms },
    { func: build,    args: [ cat, buildConfig, extraArgs     ], loop: extraArgs.platforms },
    { func: postHook, args: [ cat, buildConfig, extraArgs     ], loop: extraArgs.platforms },
    { func: clean,    args: [ cat, extraArgs                  ] }
];

function loop(func, args, platforms, nextTask) {

    util.iterate(
        platforms,
        function(platform, nextPlatform) {

            // Callback function for the call into app-tools.
            function callback(errno) {
                if (errno) {
                    throw new Error("Packaging failed");
                } else {
                    nextPlatform();
                }
            }

            // Add platform and callback to args array.
            var taskArgs = args.concat([platform, callback]);
            // Run async task.
            func.apply(null, taskArgs)
        },
        function () {
            nextTask();
        });
}

util.iterate(
    tasks,
    function(task, next) {

        // Callback function for the call into app-tools.
        function callback(errno) {
            if (errno) {
                throw new Error("Packaging failed");
            } else {
                next();
            }
        }

        if (task.loop) {
            // Run for all platforms
            loop(task.func, task.args, task.loop, next);
        } else {
            // Add callback to args array.
            task.args.push(callback);
            // Run async task.
            task.func.apply(null, task.args)
        }
    });

function _readManifest(path, output) {
    var buffer = null;
    if (ShellJS.test("-f", path)) {
        buffer = FS.readFileSync(path, {"encoding": "utf8"});
    }
    if (!buffer) {
        output.error("Failed to read manifest.json in " + appPath);
        output.info("Please create a minimal manifest.json by pasting the following content");
        output.info('{ "xwalk_package_id": "com.example.foo" }');
        process.exit(cat.EXIT_CODE_ERROR);
    }
    var json = JSON.parse(buffer);
    if (!json) {
        output.error("Failed to parse manifest.json");
        process.exit(cat.EXIT_CODE_ERROR);
    }
    return json;
}
